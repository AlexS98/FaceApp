{"version":3,"sources":["components/Header.tsx","components/face/ImageUpload.tsx","components/Detector.tsx","components/Login.tsx","components/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","type","placeholder","aria-label","ImageUpload","state","file","imagePreviewUrl","e","preventDefault","console","log","this","reader","FileReader","target","files","onloadend","setState","result","readAsDataURL","$imagePreview","src","onSubmit","_handleSubmit","onChange","_handleImageChange","onClick","React","Component","Detector","render","Login","Home","href","role","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAkBeA,EAfU,WACrB,OACI,yBAAKC,UAAU,4BACX,wBAAIA,UAAU,sBACV,wBAAIA,UAAU,YAAW,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,aAA9B,cAE7B,0BAAMD,UAAU,4BACZ,2BAAOA,UAAU,uBAAuBE,KAAK,QAAQC,YAAY,QAAQC,aAAW,UACpF,2BAAOJ,UAAU,uBAAuBE,KAAK,WAAWC,YAAY,WAAWC,aAAW,aAC1F,kBAAC,IAAD,CAAMJ,UAAU,kBAAkBC,GAAG,UAArC,Y,2CCkDDI,E,2MAtDXC,MAAQ,CACJC,KAAM,GACNC,gBAAiB,I,6EAGPC,GACVA,EAAEC,iBAEFC,QAAQC,IAAI,oBAAqBC,KAAKP,MAAMC,Q,yCAG7BE,GAAU,IAAD,OACxBA,EAAEC,iBAEF,IAAII,EAAS,IAAIC,WACbR,EAAOE,EAAEO,OAAOC,MAAM,GAE1BH,EAAOI,UAAY,WACf,EAAKC,SAAS,CACVZ,KAAMA,EACNC,gBAAiBM,EAAOM,UAIhCN,EAAOO,cAAcd,K,+BAGf,IAAD,OACCC,EAAoBK,KAAKP,MAAzBE,gBACFc,EAAgB,KAOpB,OALIA,EADAd,EACiB,yBAAKe,IAAKf,IAEV,yBAAKR,UAAU,eAAf,sCAIjB,yBAAKA,UAAU,oBACX,0BAAMwB,SAAU,SAACf,GAAD,OAAO,EAAKgB,cAAchB,KACtC,2BAAOT,UAAU,YACbE,KAAK,OACLwB,SAAU,SAACjB,GAAD,OAAO,EAAKkB,mBAAmBlB,MAC7C,4BAAQT,UAAU,eACdE,KAAK,SACL0B,QAAS,SAACnB,GAAD,OAAO,EAAKgB,cAAchB,KAFvC,iBAIJ,yBAAKT,UAAU,cACVsB,Q,GAhDKO,IAAMC,WCIjBC,E,2MAPXC,OAAS,kBACL,kDAEI,kBAAC,EAAD,Q,6BAJWH,IAAMC,WCMdG,G,iNANXD,OAAS,kBACL,iD,6BAFYH,IAAMC,YCaXI,E,2MAZXF,OAAS,kBACL,6BACI,yBAAKhC,UAAU,aACX,yBAAKA,UAAU,aACX,6CACA,qPACA,2BAAG,uBAAGA,UAAU,yBAAyBmC,KAAK,IAAIC,KAAK,UAApD,wB,6BAPJP,IAAMC,WCuBVO,EAhBO,WACpB,OACE,yBAAKrC,UAAU,aACb,4BAAQA,UAAU,+CAChB,uBAAGA,UAAU,eAAemC,KAAK,KAAjC,WACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,YAAYC,UAAWT,IACzC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,SAASC,UAAWP,OCP1BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASd,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAELe,SAASC,eAAe,SD8HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9d5a6077.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <div className=\"collapse navbar-collapse\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"nav-item\"><Link className=\"nav-link\" to='/detector'>Detector</Link></li>\r\n            </ul>\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n                <input className=\"form-control mr-sm-2\" type=\"email\" placeholder=\"Email\" aria-label=\"Email\" />\r\n                <input className=\"form-control mr-sm-2\" type=\"password\" placeholder=\"Password\" aria-label=\"Password\" />\r\n                <Link className=\"btn btn-success\" to='/login'>Login</Link>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\ninterface ImageUploadState {\r\n    file: string,\r\n    imagePreviewUrl: string\r\n}\r\n\r\nclass ImageUpload extends React.Component<{}, ImageUploadState>  {\r\n    state = {\r\n        file: '',\r\n        imagePreviewUrl: ''\r\n    };\r\n\r\n    _handleSubmit(e: any) {\r\n        e.preventDefault();\r\n        // TODO: do something with -> this.state.file\r\n        console.log('handle uploading-', this.state.file);\r\n    }\r\n\r\n    _handleImageChange(e : any) {\r\n        e.preventDefault();\r\n\r\n        let reader = new FileReader();\r\n        let file = e.target.files[0];\r\n\r\n        reader.onloadend = () => {\r\n            this.setState({\r\n                file: file as string,\r\n                imagePreviewUrl: reader.result as string\r\n            });\r\n        }\r\n\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    render() {\r\n        let { imagePreviewUrl } = this.state;\r\n        let $imagePreview = null;\r\n        if (imagePreviewUrl) {\r\n            $imagePreview = (<img src={imagePreviewUrl} />);\r\n        } else {\r\n            $imagePreview = (<div className=\"previewText\">Please select an Image for Preview</div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"previewComponent\">\r\n                <form onSubmit={(e) => this._handleSubmit(e)}>\r\n                    <input className=\"fileInput\"\r\n                        type=\"file\"\r\n                        onChange={(e) => this._handleImageChange(e)} />\r\n                    <button className=\"submitButton\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => this._handleSubmit(e)}>Upload Image</button>\r\n                </form>\r\n                <div className=\"imgPreview\">\r\n                    {$imagePreview}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageUpload;","import React from 'react';\r\nimport ImageUpload from './face/ImageUpload';\r\n\r\nclass Detector extends React.Component<{}>{\r\n    render = () =>\r\n        <div>\r\n            Detector component\r\n            <ImageUpload />\r\n        </div>\r\n}\r\n\r\nexport default Detector;","import React from 'react';\r\n\r\nclass Login extends React.Component<{}>{\r\n    render = () =>\r\n        <div>\r\n            Login component\r\n        </div>\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nclass Home extends React.Component<{}>{\r\n    render = () =>\r\n        <div>\r\n            <div className=\"jumbotron\">\r\n                <div className=\"container\">\r\n                    <h1>Hello, world!</h1>\r\n                    <p>This is a template for a simple marketing or informational website. It includes a large callout called a jumbotron and three supporting pieces of content. Use it as a starting point to create something more unique.</p>\r\n                    <p><a className=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Learn more Â»</a></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport { Switch, Route } from 'react-router';\r\nimport Detector from './components/Detector';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Login from './components/Login';\r\nimport Home from './components/Home';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <header className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"/\">FaceApp</a>\r\n        <Header />\r\n      </header>\r\n      <Switch>\r\n        <Route exact path='/' component={Home} />\r\n        <Route exact path='/detector' component={Detector} />\r\n        <Route exact path='/login' component={Login} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}